name: Deploy Backend to EC2

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

permissions:
  contents: read
  packages: write

env:
  GHCR_REPOSITORY: product-market-research

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: pip install flake8

      - name: Lint Python code
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed with warnings"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, tag, and push backend image with cache
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build with remote layer caching
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.backend \
            --tag ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}:$IMAGE_TAG \
            --tag ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}:latest \
            --cache-from ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}:buildcache \
            --cache-to ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}:buildcache \
            --push \
            .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Copy configuration files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend/docker-compose.prod.yml,backend/nginx.conf"
          target: "/home/ec2-user/backend/"
          strip_components: 1

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/backend
            # Replace placeholder port in nginx.conf with value from .env
            PORT=$(grep '^PORT=' .env | cut -d'=' -f2)
            sed -i "s/PLACEHOLDER_PORT/${PORT}/g" nginx.conf
            # Read GitHub credentials from .env file
            GITHUB_TOKEN=$(grep '^GITHUB_TOKEN=' .env | cut -d'=' -f2)
            GITHUB_ACTOR=$(grep '^GITHUB_ACTOR=' .env | cut -d'=' -f2)
            # Login to GitHub Container Registry
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
            # Stop existing containers
            docker compose -f docker-compose.prod.yml down
            # Pull latest images from GHCR
            docker compose -f docker-compose.prod.yml pull
            # Start new containers
            docker compose -f docker-compose.prod.yml up -d
            # Clean up old images
            docker system prune -f
