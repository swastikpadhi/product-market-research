events {
    worker_connections 1024;
}

http {
    # MIME types
    include /etc/nginx/mime.types;
    
    upstream backend {
        server research-api:PLACEHOLDER_PORT;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Hide server information
    server_tokens off;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # Hide additional headers (using proxy_hide_header for backend responses)
    proxy_hide_header "Server";
    proxy_hide_header "X-Powered-By";

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name marketlens.publicvm.com;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server with Let's Encrypt certificates
    server {
        listen 443 ssl http2;
        server_name marketlens.publicvm.com;
        
        # Let's Encrypt certificates
        ssl_certificate /etc/letsencrypt/live/marketlens.publicvm.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/marketlens.publicvm.com/privkey.pem;
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Hide nginx version in error pages
        server_tokens off;

        # Nginx health check endpoint (independent of backend)
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Backend health check endpoint (proxied to API)
        location /health {
            limit_req zone=api;
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API routes - proxy to backend
        location /api/ {
            limit_req zone=api;
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide backend server information
            proxy_hide_header "Server";
            proxy_hide_header "X-Powered-By";
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Frontend routes - serve static files directly
        location / {
            root /var/www/frontend;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # CSS files
            location ~* \.css$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                add_header Content-Type "text/css";
            }
            
            # JavaScript files
            location ~* \.js$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                add_header Content-Type "application/javascript";
            }
            
            # Other static assets
            location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
            }
            
            # Cache HTML files for shorter time
            location ~* \.(html)$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }
    }
}
